package MineSweeper;
import java.awt.*;
import java.awt.event.*;
import java.util.ArrayList;
import javax.swing.*;
import javax.swing.JButton;

public class MineSweeper extends OnScreen{

    @Override
    public void initGame() {
        // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏•‡∏π‡∏Å‡∏£‡∏∞‡πÄ‡∏ö‡∏¥‡∏î‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô 15% ‡∏Ç‡∏≠‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        mineCount = (int) Math.round(numRows * numCols * 0.15);
    
        // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ç‡∏ô‡∏≤‡∏î‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡πÉ‡∏´‡πâ‡∏•‡∏î‡∏•‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏ñ‡∏ß‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô
        int fontSize = Math.max(10, 50 - numRows);
    
        // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡πÄ‡∏Å‡∏°
        frame = new JFrame("Minesweeper");
        frame.setSize(boardWidth, boardHeight + 50);
        frame.setLocationRelativeTo(null);
        frame.setResizable(false);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setLayout(new BorderLayout());
    
        // ‡πÅ‡∏™‡∏î‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏∞‡πÄ‡∏ö‡∏¥‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠
        textLabel = new JLabel("Minesweeper: " + mineCount, JLabel.CENTER);
        textLabel.setFont(new Font("Arial", Font.BOLD, 25));
        textLabel.setOpaque(true);
        
        // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ú‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° ‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡πâ‡∏≤‡∏¢‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ
        textPanel = new JPanel(new BorderLayout());
        textPanel.add(textLabel, BorderLayout.CENTER);
        frame.add(textPanel, BorderLayout.NORTH);
    
        // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡πÄ‡∏Å‡∏°‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ GridLayout
        boardPanel = new JPanel(new GridLayout(numRows, numCols));
        frame.add(boardPanel);
        
        // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏°‡πÉ‡∏´‡∏°‡πà
        replayButton = new JButton("Replay");
        replayButton.setFont(new Font("Arial", Font.BOLD, 16));
        replayButton.setVisible(false);
        replayButton.addActionListener(e -> {
            frame.dispose();
            initGame(); // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏°‡πÉ‡∏´‡∏°‡πà
        });
        textPanel.add(replayButton, BorderLayout.EAST);
    
        // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ö‡∏≠‡∏£‡πå‡∏î‡πÄ‡∏Å‡∏°‡πÅ‡∏•‡∏∞‡πÄ‡∏Å‡πá‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡πÄ‡∏ö‡∏¥‡∏î
        board = new MineTile[numRows][numCols];
        mineList = new ArrayList<>();
        tilesClicked = 0;
        gameOver = false;
        
        // ‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡πà‡∏≠‡∏á MineTile ‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ó‡∏∏‡∏Å‡∏ä‡πà‡∏≠‡∏á‡∏ö‡∏ô‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏ô
        for (int r = 0; r < numRows; r++) {
            for (int c = 0; c < numCols; c++) {
                MineTile tile = new MineTile(r, c);
                board[r][c] = tile;
                tile.setFocusable(false);
                tile.setMargin(new Insets(0, 0, 0, 0));
                tile.setFont(new Font("Arial Unicode MS", Font.PLAIN, fontSize));

                // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡∏•‡∏¥‡∏Å‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô
                tile.addMouseListener(new MouseAdapter() {
                    public void mousePressed(MouseEvent e) {
                        if (gameOver) return;
                        MineTile tile = (MineTile) e.getSource();
                        
                        if (e.getButton() == MouseEvent.BUTTON1) { // ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ã‡πâ‡∏≤‡∏¢
                            if (tile.getText().equals("")) {
                                if (mineList.contains(tile)) {
                                    revealMines(); // ‡∏ñ‡πâ‡∏≤‡∏Ñ‡∏•‡∏¥‡∏Å‡πÇ‡∏î‡∏ô‡∏£‡∏∞‡πÄ‡∏ö‡∏¥‡∏î
                                } else {
                                    checkMine(tile.getRow(), tile.getColumn()); // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà
                                }
                            }
                        } else if (e.getButton() == MouseEvent.BUTTON3) { // ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏Ç‡∏ß‡∏≤
                            if (tile.getText().equals("") && tile.isEnabled()) {
                                tile.setText("üö©"); // ‡∏ï‡∏±‡πâ‡∏á‡∏ò‡∏á
                            }
                            else if (tile.getText().equals("üö©")) {
                                tile.setText(""); // ‡πÄ‡∏≠‡∏≤‡∏ò‡∏á‡∏≠‡∏≠‡∏Å
                            }
                        }
                    }
                });

                boardPanel.add(tile);
            }
        }
        
        frame.setVisible(true);
        setMines(); // ‡∏™‡∏∏‡πà‡∏°‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏£‡∏∞‡πÄ‡∏ö‡∏¥‡∏î
    }

    @Override
    public void setMines() {
        int mineLeft = mineCount;
        while (mineLeft > 0) {
            int r = random.nextInt(numRows);
            int c = random.nextInt(numCols);
            MineTile tile = board[r][c];
            if (!mineList.contains(tile)) {
                mineList.add(tile);
                mineLeft--;
            }
        }
    }

    @Override
    public void revealMines() {
        // ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡πÄ‡∏ö‡∏¥‡∏î‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        for (int i = 0; i < mineList.size(); i++) {
            MineTile tile = mineList.get(i);
            tile.setText("üí£");
        }
        
        gameOver = true;
        textLabel.setText("Game Over!"); // ‡πÅ‡∏à‡πâ‡∏á‡∏ß‡πà‡∏≤‡πÄ‡∏Å‡∏°‡∏à‡∏ö‡πÅ‡∏•‡πâ‡∏ß
        replayButton.setVisible(true); // ‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏•‡πà‡∏ô‡πÉ‡∏´‡∏°‡πà
    }

    @Override
    public void checkMine(int r, int c) {
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏Ç‡∏≠‡∏ö‡πÄ‡∏Ç‡∏ï‡∏Ç‡∏≠‡∏á‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if (r < 0 || r >= numRows || c < 0 || c >= numCols) return;
        
        MineTile tile = board[r][c];
        if (!tile.isEnabled()) return;
        
        tile.setEnabled(false);
        tilesClicked++;

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏∞‡πÄ‡∏ö‡∏¥‡∏î‡∏£‡∏≠‡∏ö‡πÜ ‡∏ä‡πà‡∏≠‡∏á‡∏ô‡∏µ‡πâ
        int minesFound = countMinesAround(r, c);
        if (minesFound > 0) {
            tile.setText(String.valueOf(minesFound));
        } else {
            tile.setText(""); // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏∞‡πÄ‡∏ö‡∏¥‡∏î‡∏£‡∏≠‡∏ö‡∏Ç‡πâ‡∏≤‡∏á‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡∏¥‡∏î‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡∏ï‡πà‡∏≠‡πÑ‡∏õ
            spreadClear(r, c);
        }
        
        // ‡πÄ‡∏ä‡πá‡∏Å‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏ä‡∏ô‡∏∞‡πÄ‡∏Å‡∏°‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if (tilesClicked == numRows * numCols - mineList.size()) {
            gameOver = true;
            textLabel.setText("Mines Cleared!"); // ‡πÅ‡∏à‡πâ‡∏á‡∏ß‡πà‡∏≤‡∏ä‡∏ô‡∏∞‡πÄ‡∏Å‡∏°‡πÅ‡∏•‡πâ‡∏ß
            replayButton.setVisible(true);
        }
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏∞‡πÄ‡∏ö‡∏¥‡∏î‡∏£‡∏≠‡∏ö‡πÜ ‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏
    public int countMinesAround(int r, int c) {
        int count = 0;
        for (int i = -1; i <= 1; i++) {
            for (int j = -1; j <= 1; j++) {
                if (r + i >= 0 && r + i < numRows && c + j >= 0 && c + j < numCols) {
                    if (mineList.contains(board[r + i][c + j])) {
                        count++;
                    }
                }
            }
        }
        return count;
    }

    @Override
    public void spreadClear(int r, int c) {
        // ‡πÄ‡∏õ‡∏¥‡∏î‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡∏£‡∏≠‡∏ö‡∏Ç‡πâ‡∏≤‡∏á‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏∞‡πÄ‡∏ö‡∏¥‡∏î
        for (int i = -1; i <= 1; i++) {
            for (int j = -1; j <= 1; j++) {
                checkMine(r + i, c + j);
            }
        }
    }
}
